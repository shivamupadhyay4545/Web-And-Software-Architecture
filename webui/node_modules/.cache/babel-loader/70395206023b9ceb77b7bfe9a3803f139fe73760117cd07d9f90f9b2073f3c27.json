{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-6ef6ca5e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"Photos\", -1 /* HOISTED */));\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = [\"src\"];\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = {\n  key: 1\n};\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"No photos available\", -1 /* HOISTED */));\nconst _hoisted_10 = [_hoisted_9];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_router_link, {\n    to: {\n      name: 'HomeView',\n      params: {\n        username: _ctx.$route.params.username\n      }\n    }\n  }, {\n    default: _withCtx(() => [_createTextVNode(\" Go to Home \")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"to\"]), _createElementVNode(\"div\", null, [_createCommentVNode(\" Display user details: number of photos, followers, and followings \"), _createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, \"Photos: \" + _toDisplayString($data.numberOfPhotos), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Followers: \" + _toDisplayString($data.followersCount), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Followings: \" + _toDisplayString($data.followingsCount), 1 /* TEXT */)]), _createCommentVNode(\" Display a list of user photos \"), $data.photos.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.photos, photo => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: photo.photoId\n    }, [_createCommentVNode(\" Display each photo as a clickable button \"), _createElementVNode(\"button\", {\n      onClick: $event => $options.showComments(photo)\n    }, [_createElementVNode(\"img\", {\n      src: $options.getImageUrl(photo.Photobytes),\n      alt: \"User Photo\"\n    }, null, 8 /* PROPS */, _hoisted_4)], 8 /* PROPS */, _hoisted_3), _createElementVNode(\"p\", null, \"Comments \" + _toDisplayString(photo.NoComments), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.commentInput = $event),\n      class: \"comment-input\",\n      placeholder: \"Add a comment...\"\n    }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.commentInput]]), _createElementVNode(\"button\", {\n      onClick: $event => $options.postComment(photo.PhotoId),\n      class: \"post-comment-button\"\n    }, \"Post Comment\", 8 /* PROPS */, _hoisted_5), _createElementVNode(\"p\", null, \"Likes \" + _toDisplayString(photo.Likes), 1 /* TEXT */), photo.Liked === 1 ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      onClick: $event => $options.toggleLike(photo.PhotoId, true)\n    }, \"Dislike\", 8 /* PROPS */, _hoisted_6)) : (_openBlock(), _createElementBlock(\"button\", {\n      key: 1,\n      onClick: $event => $options.toggleLike(photo.PhotoId, false)\n    }, \"Like\", 8 /* PROPS */, _hoisted_7)), _createElementVNode(\"p\", null, \"Uploaded At \" + _toDisplayString($options.formatTimestamp(photo.CreatedAt)), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [..._hoisted_10]))])]);\n}","map":{"version":3,"names":["_createElementVNode","_hoisted_9","_createElementBlock","_createVNode","_component_router_link","to","name","params","username","_ctx","$route","_createCommentVNode","_toDisplayString","$data","numberOfPhotos","followersCount","followingsCount","photos","length","_hoisted_1","_hoisted_2","_Fragment","_renderList","photo","key","photoId","onClick","$event","$options","showComments","src","getImageUrl","Photobytes","alt","NoComments","commentInput","class","placeholder","postComment","PhotoId","_hoisted_5","Likes","Liked","toggleLike","_hoisted_6","_hoisted_7","formatTimestamp","CreatedAt","_hoisted_8","_hoisted_10"],"sources":["/Users/shivamkumar/Desktop/wasaphoto/webui/src/components/UserProfile.vue"],"sourcesContent":["<template>\n    <div>\n      <router-link :to=\"{ name: 'HomeView', params: { username: $route.params.username } }\">\n        Go to Home\n      </router-link>\n      <div>\n        <!-- Display user details: number of photos, followers, and followings -->\n        <div>\n          <p>Photos: {{ numberOfPhotos }}</p>\n          <p>Followers: {{ followersCount }}</p>\n          <p>Followings: {{ followingsCount }}</p>\n        </div>\n  \n        <!-- Display a list of user photos -->\n        <div v-if=\"photos.length > 0\">\n          <h3>Photos</h3>\n          <ul>\n            <div v-for=\"photo in photos\" :key=\"photo.photoId\">\n              <!-- Display each photo as a clickable button -->\n              <button @click=\"showComments(photo)\">\n                <img :src=\"getImageUrl(photo.Photobytes)\" alt=\"User Photo\" />\n              </button>\n              <p>Comments {{ photo.NoComments }}</p>\n              <input v-model=\"commentInput\" class=\"comment-input\" placeholder=\"Add a comment...\" />\n              <button @click=\"postComment(photo.PhotoId)\" class=\"post-comment-button\">Post Comment</button>\n              <p>Likes {{ photo.Likes }}</p>\n              <button v-if=\"photo.Liked === 1\" @click=\"toggleLike(photo.PhotoId, true)\">Dislike</button>\n              <button v-else @click=\"toggleLike(photo.PhotoId, false)\">Like</button>\n              <p>Uploaded At {{ formatTimestamp(photo.CreatedAt) }}</p>\n            </div>\n          </ul>\n        </div>\n        <div v-else>\n          <p>No photos available</p>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import moment from 'moment';\n  \n  export default {\n    data() {\n      return {\n        numberOfPhotos: 0,\n        followersCount: 0,\n        followingsCount: 0,\n        photos: [],\n        commentInput: '', // Add this line to define commentInput\n      };\n    },\n    methods: {\n      async fetchUserProfile() {\n        try {\n          const username = this.$route.params.username;\n          const response = await axios.get(`http://localhost:8080/user/${username}/profile`);\n          const data = response.data;\n  \n          this.numberOfPhotos = data['my profile']['PhotoNo'];\n          this.followersCount = data['my profile']['Followers'];\n          this.followingsCount = data['my profile']['Following'];\n          this.photos = data['my profile']['Photos'];\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      },\n      getImageUrl(photobytes) {\n        if (photobytes) {\n          return `data:image/jpeg;base64,${photobytes}`;\n        }\n  \n        // If photobytes is null or undefined, return a placeholder or empty string\n        return '';\n      },\n      formatTimestamp(timestamp) {\n        // Use moment to format the timestamp\n        return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n      },\n      async postComment(PhotoId) {\n        try {\n          const username = this.$route.params.username;\n          const response = await axios.post(\n            `http://localhost:8080/user/${username}/photos/comment?Photoid=${PhotoId}`,\n            {\n              content: this.commentInput,\n            }\n          );\n  \n          if (response.status === 200) {\n            // Successfully posted comment, fetch updated user data\n            this.fetchUserProfile(); // Corrected method name\n            // Clear the comment input\n            this.commentInput = '';\n          } else {\n            console.error('Failed to post comment:', response.statusText);\n          }\n        } catch (error) {\n          const username = this.$route.params.username;\n          console.error('Error while posting comment:', error.message, 'username:', username, 'Photoid:', PhotoId);\n        }\n      },\n      showComments(photo) {\n        // Use Vue Router to navigate to the comments route\n        this.$router.push({\n          name: 'CommentPhotoForm', // Replace with the actual name of your Comments route\n          params: { PhotoId: photo.PhotoId, username: this.$route.params.username },\n        });\n      },\n      async toggleLike(photoId, liked) {\n        try {\n          const username = this.$route.params.username;\n  \n          if (liked) {\n            // Send DELETE request to unlike the photo\n            await axios.delete(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n          } else {\n            // Send POST request to like the photo\n            await axios.post(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n          }\n          window.location.reload();\n          // Update dislikeStatus after toggling the like state\n        } catch (error) {\n          console.error('Error while toggling like:', error.message);\n        }\n      },\n    },\n    created() {\n      this.fetchUserProfile();\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Add your component styles here */\n  </style>\n  \n\n\n\n\n<!-- components/Profile.vue\n<template>\n    <router-link :to=\"{ name: 'HomeView', params: { username: $route.params.username } }\">\n      Go to Home\n      </router-link>\n    <div>\n      // Display user details: number of photos, followers, and followings \n      <div>\n        <p>Photos: {{ numberOfPhotos }}</p>\n        <p>Followers: {{ followersCount }}</p>\n        <p>Followings: {{ followingsCount }}</p>\n      </div>\n  \n      // Display a list of user photos \n      <div v-if=\"photos.length > 0\">\n        <h3>Photos</h3>\n        <ul>\n          <div v-for=\"photo in photos\" :key=\"photo.photoId\">\n            // Display each photo as a clickable button \n            <button @click=\"showComments(photo)\">\n              <img :src=\"getImageUrl(photo.Photobytes)\" alt=\"User Photo\" />\n            </button>\n              <p>Comments {{ photo.NoComments }}</p>\n              <input v-model=\"commentInput\" class=\"comment-input\" placeholder=\"Add a comment...\" />\n              <button @click=\"postComment(photo.PhotoId)\" class=\"post-comment-button\">Post Comment</button>\n              <p>Likes {{ photo.Likes }}</p>\n              <button v-if=\"photo.Liked === 1\" @click=\"toggleLike(photo.PhotoId, true)\">Dislike</button>\n              <button v-else @click=\"toggleLike(photo.PhotoId, false)\">Like</button>\n              <p>Uploaded At {{ formatTimestamp(photo.CreatedAt) }}</p>\n          </div>\n        </ul>\n      </div>\n      <div v-else>\n        <p>No photos available</p>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import moment from 'moment';\n  \n  export default {\n    data() {\n      return {\n        numberOfPhotos: 0,\n        followersCount: 0,\n        followingsCount: 0,\n        photos: [],\n      };\n    },\n    props: {\n      photo: Object,\n    },\n    methods: {\n      async fetchUserProfile() {\n        try {\n          const username = this.$route.params.username;\n          const response = await axios.get(`http://localhost:8080/user/${username}/profile`);\n          const data = response.data;\n  \n          this.numberOfPhotos = data['my profile']['PhotoNo'];\n          this.followersCount = data['my profile']['Followers'];\n          this.followingsCount = data['my profile']['Following'];\n          this.photos = data['my profile']['Photos'];\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      },\n      getImageUrl(photobytes) {\n        if (photobytes) {\n          return `data:image/jpeg;base64,${photobytes}`;\n        }\n  \n        // If photobytes is null or undefined, return a placeholder or empty string\n        return '';\n      },\n      formatTimestamp(timestamp) {\n        // Use moment to format the timestamp\n        return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n      },\n      async postComment(PhotoId) {\n      try {\n        const username = this.$route.params.username;\n        const response = await axios.post(\n          `http://localhost:8080/user/${username}/photos/comment?Photoid=${PhotoId}`,\n          {\n            content: this.commentInput,\n          }\n        );\n\n        if (response.status === 200) {\n          // Successfully posted comment, fetch updated user data\n          this.fetchUserData();\n          // Clear the comment input\n          this.commentInput = '';\n        } else {\n          console.error('Failed to post comment:', response.statusText);\n        }\n      } catch (error) {\n        const username = this.$route.params.username;\n        console.error('Error while posting comment:', error.message, 'username:', username, 'Photoid:', PhotoId);\n      }\n    },\n      showComments(photo) {\n        // Use Vue Router to navigate to the comments route\n        this.$router.push({\n          name: 'CommentPhotoForm', // Replace with the actual name of your Comments route\n          params: { PhotoId: photo.PhotoId , username: this.$route.params.username},\n        });\n      },\n    },\n    async toggleLike(photoId, liked) {\n      try {\n        const username = this.$route.params.username;\n\n        if (liked) {\n          // Send DELETE request to unlike the photo\n          await axios.delete(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        } else {\n          // Send POST request to like the photo\n          await axios.post(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        }\n        window.location.reload()\n        // Update dislikeStatus after toggling the like state\n        \n      } catch (error) {\n        console.error('Error while toggling like:', error.message);\n      }\n    },\n    created() {\n      this.fetchUserProfile();\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Add your component styles here */\n  </style>\n   -->"],"mappings":";;;;;gEAeUA,mBAAA,CAAe,YAAX,QAAM;;;;;;;;;gEAkBVA,mBAAA,CAA0B,WAAvB,qBAAmB;qBAAtBC,UAA0B,C;;;uBAhChCC,mBAAA,CAmCM,cAlCJC,YAAA,CAEcC,sBAAA;IAFAC,EAAE;MAAAC,IAAA;MAAAC,MAAA;QAAAC,QAAA,EAA0CC,IAAA,CAAAC,MAAM,CAACH,MAAM,CAACC;MAAQ;IAAA;;sBAAM,MAEtF,C,iBAFsF,cAEtF,E;;6BACAR,mBAAA,CA8BM,cA7BJW,mBAAA,uEAA0E,EAC1EX,mBAAA,CAIM,cAHJA,mBAAA,CAAmC,WAAhC,UAAQ,GAAAY,gBAAA,CAAGC,KAAA,CAAAC,cAAc,kBAC5Bd,mBAAA,CAAsC,WAAnC,aAAW,GAAAY,gBAAA,CAAGC,KAAA,CAAAE,cAAc,kBAC/Bf,mBAAA,CAAwC,WAArC,cAAY,GAAAY,gBAAA,CAAGC,KAAA,CAAAG,eAAe,iB,GAGnCL,mBAAA,mCAAsC,EAC3BE,KAAA,CAAAI,MAAM,CAACC,MAAM,Q,cAAxBhB,mBAAA,CAiBM,OAAAiB,UAAA,GAhBJC,UAAe,EACfpB,mBAAA,CAcK,c,kBAbHE,mBAAA,CAYMmB,SAAA,QAAAC,WAAA,CAZeT,KAAA,CAAAI,MAAM,EAAfM,KAAK;yBAAjBrB,mBAAA,CAYM;MAZwBsB,GAAG,EAAED,KAAK,CAACE;QACvCd,mBAAA,8CAAiD,EACjDX,mBAAA,CAES;MAFA0B,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,YAAY,CAACN,KAAK;QAChCvB,mBAAA,CAA6D;MAAvD8B,GAAG,EAAEF,QAAA,CAAAG,WAAW,CAACR,KAAK,CAACS,UAAU;MAAGC,GAAG,EAAC;sEAEhDjC,mBAAA,CAAsC,WAAnC,WAAS,GAAAY,gBAAA,CAAGW,KAAK,CAACW,UAAU,kB,gBAC/BlC,mBAAA,CAAqF;iEAArEa,KAAA,CAAAsB,YAAY,GAAAR,MAAA;MAAES,KAAK,EAAC,eAAe;MAACC,WAAW,EAAC;mDAAhDxB,KAAA,CAAAsB,YAAY,E,GAC5BnC,mBAAA,CAA6F;MAApF0B,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAU,WAAW,CAACf,KAAK,CAACgB,OAAO;MAAGH,KAAK,EAAC;OAAsB,cAAY,iBAAAI,UAAA,GACpFxC,mBAAA,CAA8B,WAA3B,QAAM,GAAAY,gBAAA,CAAGW,KAAK,CAACkB,KAAK,kBACTlB,KAAK,CAACmB,KAAK,U,cAAzBxC,mBAAA,CAA0F;;MAAxDwB,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAe,UAAU,CAACpB,KAAK,CAACgB,OAAO;OAAS,SAAO,iBAAAK,UAAA,M,cACjF1C,mBAAA,CAAsE;;MAAtDwB,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAe,UAAU,CAACpB,KAAK,CAACgB,OAAO;OAAU,MAAI,iBAAAM,UAAA,IAC7D7C,mBAAA,CAAyD,WAAtD,cAAY,GAAAY,gBAAA,CAAGgB,QAAA,CAAAkB,eAAe,CAACvB,KAAK,CAACwB,SAAS,kB;uDAIvD7C,mBAAA,CAEM,OAAA8C,UAAA,MAAAC,WAAA,I"},"metadata":{},"sourceType":"module","externalDependencies":[]}