{"ast":null,"code":"import axios from 'axios';\nimport moment from 'moment';\nexport default {\n  data() {\n    return {\n      comments: [],\n      photoBytes: ''\n    };\n  },\n  props: {\n    username: String,\n    PhotoId: String\n  },\n  methods: {\n    async deleteComment(comment) {\n      try {\n        const jsonPayload = {\n          comment\n        };\n\n        // Make a DELETE request to delete the comment with the JSON payload\n        const response = await axios.delete(`http://localhost:8080/user/${this.username}/photos/comment`, {\n          content: jsonPayload\n        } // Pass the payload in the 'data' option\n        );\n        if (response.status === 200) {\n          console.log('Comment deleted successfully!');\n          // Fetch comments data after deleting the comment\n          this.fetchComments();\n        } else {\n          console.error('Failed to delete comment:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error deleting comment:', error.message);\n      }\n    },\n    async fetchComments() {\n      try {\n        const parts = this.photoId.split('_');\n        // Make a GET request to fetch comments data\n        const response = await axios.get(`http://localhost:8080/user/${parts[0]}/photos/${this.PhotoId}`);\n\n        // Update data with the fetched comments and photoBytes\n        this.comments = response.data.comments;\n        this.photoBytes = response.data.photobytes;\n      } catch (error) {\n        console.log(\"bhenchod\", this.username, this.PhotoId);\n        console.error('Error fetching comments:', this.PhotoId, this.username);\n      }\n    },\n    getImageUrl(photobytes) {\n      if (photobytes) {\n        return `data:image/jpeg;base64,${photobytes}`;\n      }\n      return ''; // Return placeholder or empty string if photobytes is null or undefined\n    },\n    formatTimestamp(timestamp) {\n      // Use moment to format the timestamp\n      return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n    }\n  },\n  mounted() {\n    // Fetch comments data when the component is mounted\n    this.fetchComments();\n  }\n};","map":{"version":3,"names":["axios","moment","data","comments","photoBytes","props","username","String","PhotoId","methods","deleteComment","comment","jsonPayload","response","delete","content","status","console","log","fetchComments","error","statusText","message","parts","photoId","split","get","photobytes","getImageUrl","formatTimestamp","timestamp","format","mounted"],"sources":["/Users/shivamkumar/Desktop/wasaphoto/webui/src/components/CommentPhotoForm.vue"],"sourcesContent":["<template>\n    <div>\n      <img :src=\"getImageUrl(photoBytes)\" alt=\"User Photo\" />\n      <div v-for=\"comment in comments\" :key=\"comment.DateTime\">\n        <p>{{ comment.CommentUser }}:</p>\n        <p>{{ comment.Comment }}</p>\n        <p>{{ formatTimestamp(comment.DateTime) }}</p>\n        <button v-if=\"this.username === comment.CommentUser\" @click=\"deleteComment(comment.Comment)\">\n        Delete Comment\n      </button>\n        <hr />\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import moment from 'moment';\n  \n  export default {\n    data() {\n      return {\n        comments: [],\n        photoBytes: '',\n      };\n    },\n    props: {\n      username: String,\n      PhotoId: String,\n    },\n    methods: {\n        async deleteComment(comment) {\n      try {\n        const jsonPayload = { comment };\n\n        // Make a DELETE request to delete the comment with the JSON payload\n        const response = await axios.delete(\n        `http://localhost:8080/user/${this.username}/photos/comment`,\n        { content: jsonPayload } // Pass the payload in the 'data' option\n        );\n\n        if (response.status === 200) {\n          console.log('Comment deleted successfully!');\n          // Fetch comments data after deleting the comment\n          this.fetchComments();\n        } else {\n          console.error('Failed to delete comment:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error deleting comment:', error.message);\n      }\n    },\n\n\n      async fetchComments() {\n        try {\n            const parts = this.photoId.split('_');\n          // Make a GET request to fetch comments data\n          const response = await axios.get(`http://localhost:8080/user/${parts[0]}/photos/${this.PhotoId}`);\n  \n          // Update data with the fetched comments and photoBytes\n          this.comments = response.data.comments;\n          this.photoBytes = response.data.photobytes;\n        } catch (error) {\n            console.log(\"bhenchod\",this.username,this.PhotoId)\n          console.error('Error fetching comments:', this.PhotoId,this.username);\n        }\n      },\n      getImageUrl(photobytes) {\n        if (photobytes) {\n          return `data:image/jpeg;base64,${photobytes}`;\n        }\n        return ''; // Return placeholder or empty string if photobytes is null or undefined\n      },\n      formatTimestamp(timestamp) {\n        // Use moment to format the timestamp\n        return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n      },\n    },\n    mounted() {\n      // Fetch comments data when the component is mounted\n      this.fetchComments();\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Add your component styles here */\n  </style>\n  "],"mappings":"AAgBE,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,MAAK,MAAO,QAAQ;AAE3B,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACLC,QAAQ,EAAEC,MAAM;IAChBC,OAAO,EAAED;EACX,CAAC;EACDE,OAAO,EAAE;IACL,MAAMC,aAAaA,CAACC,OAAO,EAAE;MAC/B,IAAI;QACF,MAAMC,WAAU,GAAI;UAAED;QAAQ,CAAC;;QAE/B;QACA,MAAME,QAAO,GAAI,MAAMb,KAAK,CAACc,MAAM,CAClC,8BAA6B,IAAI,CAACR,QAAS,iBAAgB,EAC5D;UAAES,OAAO,EAAEH;QAAY,EAAE;QACzB,CAAC;QAED,IAAIC,QAAQ,CAACG,MAAK,KAAM,GAAG,EAAE;UAC3BC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;UAC5C;UACA,IAAI,CAACC,aAAa,CAAC,CAAC;QACtB,OAAO;UACLF,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAEP,QAAQ,CAACQ,UAAU,CAAC;QACjE;MACF,EAAE,OAAOD,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACE,OAAO,CAAC;MACzD;IACF,CAAC;IAGC,MAAMH,aAAaA,CAAA,EAAG;MACpB,IAAI;QACA,MAAMI,KAAI,GAAI,IAAI,CAACC,OAAO,CAACC,KAAK,CAAC,GAAG,CAAC;QACvC;QACA,MAAMZ,QAAO,GAAI,MAAMb,KAAK,CAAC0B,GAAG,CAAE,8BAA6BH,KAAK,CAAC,CAAC,CAAE,WAAU,IAAI,CAACf,OAAQ,EAAC,CAAC;;QAEjG;QACA,IAAI,CAACL,QAAO,GAAIU,QAAQ,CAACX,IAAI,CAACC,QAAQ;QACtC,IAAI,CAACC,UAAS,GAAIS,QAAQ,CAACX,IAAI,CAACyB,UAAU;MAC5C,EAAE,OAAOP,KAAK,EAAE;QACZH,OAAO,CAACC,GAAG,CAAC,UAAU,EAAC,IAAI,CAACZ,QAAQ,EAAC,IAAI,CAACE,OAAO;QACnDS,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAE,IAAI,CAACZ,OAAO,EAAC,IAAI,CAACF,QAAQ,CAAC;MACvE;IACF,CAAC;IACDsB,WAAWA,CAACD,UAAU,EAAE;MACtB,IAAIA,UAAU,EAAE;QACd,OAAQ,0BAAyBA,UAAW,EAAC;MAC/C;MACA,OAAO,EAAE,EAAE;IACb,CAAC;IACDE,eAAeA,CAACC,SAAS,EAAE;MACzB;MACA,OAAO7B,MAAM,CAAC6B,SAAS,CAAC,CAACC,MAAM,CAAC,qBAAqB,CAAC;IACxD;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACb,aAAa,CAAC,CAAC;EACtB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}