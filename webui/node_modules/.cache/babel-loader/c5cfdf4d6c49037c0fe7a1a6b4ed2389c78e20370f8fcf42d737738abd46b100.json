{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'HomeView',\n  data() {\n    return {\n      userData: null\n    };\n  },\n  props: {\n    photo: Object\n  },\n  mounted() {\n    // Fetch user data after component is mounted\n    this.fetchUserData();\n  },\n  methods: {\n    async likePhoto(photoId) {\n      try {\n        // Get the current logged-in username from the route parameters\n        const username = this.$route.params.username;\n\n        // Send POST request to like the photo\n        await axios.post(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n\n        // Fetch updated user data after liking the photo\n        this.fetchUserData();\n      } catch (error) {\n        console.error('Error while liking the photo:', error.message);\n      }\n    },\n    async fetchUserData() {\n      try {\n        const username = this.$route.params.username;\n        const response = await axios.get(`http://localhost:8080/user/${username}`);\n        if (response.status === 200) {\n          this.userData = response.data;\n        } else {\n          console.error('Failed to fetch user data:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error during user data fetch:', error.message);\n      }\n    },\n    getImageUrl(photobytes) {\n      if (photobytes) {\n        return `data:image/jpeg;base64,${photobytes}`;\n      }\n\n      // If photobytes is null or undefined, return a placeholder or empty string\n      return '';\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","userData","props","photo","Object","mounted","fetchUserData","methods","likePhoto","photoId","username","$route","params","post","error","console","message","response","get","status","statusText","getImageUrl","photobytes"],"sources":["/Users/shivamkumar/Desktop/wasaphoto/webui/src/views/HomeView.vue"],"sourcesContent":["<!-- Home.vue -->\n\n<template>\n    <div>\n      <h1>Hello User, Welcome to your feed</h1>\n      <div v-if=\"userData && userData.photos\">\n        <!-- Display user data when 'photos' is not null -->\n        <div class=\"photosector\" v-for=\"photo in userData.photos\" :key=\"photo.PhotoId\">\n          <p style=\"font-weight: bold;\" > {{ photo.Username }}</p>\n          <img :src=\"getImageUrl(photo.Photobytes)\" alt=\"User Photo\" />\n          <button @click=\"likePhoto(photo.PhotoId)\"> <!-- Added button with click event -->\n          <img class=\"logo\" src=\"../assets/like-logo.jpeg\" />Like {{ photo.Likes }}</button>\n          <img class=\"logo\" src=\"../assets/comment-logo.png\" /><p>No Comments: {{ photo.NoComments }}</p>\n        </div>\n      </div>\n      <div v-else>\n        <p>Welcome Our new user! Follow someone to see their photos.</p>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    name: 'HomeView',\n    data() {\n      return {\n        userData: null,\n      };\n    },\n    props: {\n      photo: Object,\n    },\n    mounted() {\n      // Fetch user data after component is mounted\n      this.fetchUserData();\n    },\n    methods: {\n        async likePhoto(photoId) {\n      try {\n        // Get the current logged-in username from the route parameters\n        const username = this.$route.params.username;\n\n        // Send POST request to like the photo\n        await axios.post(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        \n        // Fetch updated user data after liking the photo\n        this.fetchUserData();\n      } catch (error) {\n        console.error('Error while liking the photo:', error.message);\n      }\n    },\n      async fetchUserData() {\n        try {\n          const username = this.$route.params.username;\n          const response = await axios.get(`http://localhost:8080/user/${username}`);\n  \n          if (response.status === 200) {\n            this.userData = response.data;\n          } else {\n            console.error('Failed to fetch user data:', response.statusText);\n          }\n        } catch (error) {\n          console.error('Error during user data fetch:', error.message);\n        }\n      },\n      getImageUrl(photobytes) {\n      if (photobytes) {\n        return `data:image/jpeg;base64,${photobytes}`;\n      }\n  \n        // If photobytes is null or undefined, return a placeholder or empty string\n        return '';\n      },\n    },\n  };\n  </script>\n  \n\n  \n  <style>\n  .photosector img{ \n    margin: 10px;\n  padding: 10px;\n  border: 1px solid #ccc;\n\n  }\n\n  .logo {\n  width: 15px;\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n}\n  /* Add styles as needed */\n  </style>\n  "],"mappings":"AAsBE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACLC,KAAK,EAAEC;EACT,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,aAAa,CAAC,CAAC;EACtB,CAAC;EACDC,OAAO,EAAE;IACL,MAAMC,SAASA,CAACC,OAAO,EAAE;MAC3B,IAAI;QACF;QACA,MAAMC,QAAO,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,QAAQ;;QAE5C;QACA,MAAMZ,KAAK,CAACe,IAAI,CAAE,8BAA6BH,QAAS,yBAAwBD,OAAQ,EAAC,CAAC;;QAE1F;QACA,IAAI,CAACH,aAAa,CAAC,CAAC;MACtB,EAAE,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACE,OAAO,CAAC;MAC/D;IACF,CAAC;IACC,MAAMV,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAMI,QAAO,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,QAAQ;QAC5C,MAAMO,QAAO,GAAI,MAAMnB,KAAK,CAACoB,GAAG,CAAE,8BAA6BR,QAAS,EAAC,CAAC;QAE1E,IAAIO,QAAQ,CAACE,MAAK,KAAM,GAAG,EAAE;UAC3B,IAAI,CAAClB,QAAO,GAAIgB,QAAQ,CAACjB,IAAI;QAC/B,OAAO;UACLe,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEG,QAAQ,CAACG,UAAU,CAAC;QAClE;MACF,EAAE,OAAON,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACE,OAAO,CAAC;MAC/D;IACF,CAAC;IACDK,WAAWA,CAACC,UAAU,EAAE;MACxB,IAAIA,UAAU,EAAE;QACd,OAAQ,0BAAyBA,UAAW,EAAC;MAC/C;;MAEE;MACA,OAAO,EAAE;IACX;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}