{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport UserHeader from '../components/UserHeader.vue';\nimport moment from 'moment';\nimport UploadPhotoForm from '../components/UploadPhotoForm.vue';\nexport default {\n  components: {\n    UserHeader,\n    UploadPhotoForm\n  },\n  name: 'HomeView',\n  data() {\n    return {\n      userData: null,\n      commentInput: ''\n    };\n  },\n  props: {\n    photo: Object\n  },\n  mounted() {\n    // Fetch user data after component is mounted\n    this.fetchUserData();\n  },\n  methods: {\n    async postComment(PhotoId) {\n      try {\n        const username = this.$route.params.username;\n        const response = await axios.post(`http://localhost:8080/user/${username}/photos/comment?Photoid=${PhotoId}`, {\n          content: this.commentInput\n        });\n        if (response.status === 200) {\n          // Successfully posted comment, fetch updated user data\n          this.fetchUserData();\n          // Clear the comment input\n          this.commentInput = '';\n        } else {\n          console.error('Failed to post comment:', response.statusText);\n        }\n      } catch (error) {\n        const username = this.$route.params.username;\n        console.error('Error while posting comment:', error.message, \"username:\", username, \"Photoid:\", PhotoId);\n      }\n    },\n    async toggleLike(photoId, liked) {\n      try {\n        const username = this.$route.params.username;\n        if (liked) {\n          // Send DELETE request to unlike the photo\n          await axios.delete(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        } else {\n          // Send POST request to like the photo\n          await axios.post(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        }\n\n        // Fetch updated user data after toggling the like state\n        this.fetchUserData();\n      } catch (error) {\n        console.error('Error while toggling like:', error.message);\n      }\n    },\n    async fetchUserData() {\n      try {\n        const username = this.$route.params.username;\n        const response = await axios.get(`http://localhost:8080/user/${username}`);\n        if (response.status === 200) {\n          this.userData = response.data;\n        } else {\n          console.error('Failed to fetch user data:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error during user data fetch:', error.message);\n      }\n    },\n    formatTimestamp(timestamp) {\n      // Use moment to format the timestamp\n      return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n    },\n    showComments(photo) {\n      const username = this.$route.params.username;\n      // Use Vue Router to navigate to the comments route\n      this.$router.push({\n        name: 'CommentPhotoForm',\n        // Replace with the actual name of your Comments route\n        params: {\n          PhotoId: photo.PhotoId,\n          username: username\n        }\n      });\n    },\n    getImageUrl(photobytes) {\n      if (photobytes) {\n        return `data:image/jpeg;base64,${photobytes}`;\n      }\n\n      // If photobytes is null or undefined, return a placeholder or empty string\n      return '';\n    }\n  }\n};","map":{"version":3,"names":["axios","UserHeader","moment","UploadPhotoForm","components","name","data","userData","commentInput","props","photo","Object","mounted","fetchUserData","methods","postComment","PhotoId","username","$route","params","response","post","content","status","console","error","statusText","message","toggleLike","photoId","liked","delete","get","formatTimestamp","timestamp","format","showComments","$router","push","getImageUrl","photobytes"],"sources":["/Users/shivamkumar/Desktop/wasaphoto/webui/src/views/HomeView.vue"],"sourcesContent":["<!-- Home.vue -->\n\n<template>\n        <UserHeader />\n        <UploadPhotoForm />\n      <h1>Hello User, Welcome to your feed</h1>\n      <router-link :to=\"{ name: 'UserProfile', params: { username: $route.params.username } }\">\n      Go to User Profile\n      </router-link>\n      <div v-if=\"userData && userData.photos\">\n        <!-- Display user data when 'photos' is not null -->\n        <div class=\"photosector\" v-for=\"photo in userData.photos\" :key=\"photo.PhotoId\">\n          <p style=\"font-weight: bold;\" > {{ photo.Username }}</p>\n          <button style=\"border: false\" @click=\"showComments(photo)\">\n          <img :src=\"getImageUrl(photo.Photobytes)\" alt=\"User Photo\" />\n        </button>\n          <button @click=\"toggleLike(photo.PhotoId, photo.Liked)\"> <!-- Modified click event -->\n          <img class=\"logo\" :src=\"photo.Liked ? '../assets/unlike-logo.png' : '../assets/like-logo.jpeg'\" />\n            {{ photo.Liked ? 'Unlike' : 'Like' }}: {{ photo.Likes }}\n            \n          <img class=\"logo\" src=\"../assets/comment-logo.png\" /><p>No Comments: {{ photo.NoComments }}</p>\n          <input v-model=\"commentInput\" placeholder=\"Add a comment...\" />\n          <button @click=\"postComment(photo.PhotoId)\">Post Comment</button>\n          <p>Uploaded At {{ formatTimestamp(photo.CreatedAt) }}</p>\n        </button>\n        </div>\n      </div>\n      <div v-else>\n        <p>Welcome Our new user! Follow someone to see their photos.</p>\n      </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import UserHeader from '../components/UserHeader.vue';\n  import moment from 'moment';\n  import UploadPhotoForm from '../components/UploadPhotoForm.vue'\n\n  \n  export default {\n    components: {\n    UserHeader,\n    UploadPhotoForm\n    },\n    name: 'HomeView',\n    data() {\n      return {\n        userData: null,\n        commentInput :'',\n      };\n    },\n    props: {\n      photo: Object,\n    },\n    mounted() {\n      // Fetch user data after component is mounted\n      this.fetchUserData();\n    },\n    methods: {\n        async postComment(PhotoId) {\n      try {\n        const username = this.$route.params.username;\n        const response = await axios.post(`http://localhost:8080/user/${username}/photos/comment?Photoid=${PhotoId}`, {\n          content: this.commentInput,\n        });\n\n        if (response.status === 200) {\n          // Successfully posted comment, fetch updated user data\n          this.fetchUserData();\n          // Clear the comment input\n          this.commentInput = '';\n        } else {\n          console.error('Failed to post comment:', response.statusText);\n        }\n      } catch (error) {\n        const username = this.$route.params.username;\n        console.error('Error while posting comment:', error.message,\"username:\",username,\"Photoid:\",PhotoId);\n      }\n    },\n  \n        async toggleLike(photoId, liked) {\n      try {\n        const username = this.$route.params.username;\n\n        if (liked) {\n          // Send DELETE request to unlike the photo\n          await axios.delete(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        } else {\n          // Send POST request to like the photo\n          await axios.post(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        }\n\n        // Fetch updated user data after toggling the like state\n        this.fetchUserData();\n      } catch (error) {\n        console.error('Error while toggling like:', error.message);\n      }\n    },\n      async fetchUserData() {\n        try {\n          const username = this.$route.params.username;\n          const response = await axios.get(`http://localhost:8080/user/${username}`);\n  \n          if (response.status === 200) {\n            this.userData = response.data;\n          } else {\n            console.error('Failed to fetch user data:', response.statusText);\n          }\n        } catch (error) {\n          console.error('Error during user data fetch:', error.message);\n        }\n      },\n      formatTimestamp(timestamp) {\n      // Use moment to format the timestamp\n      return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n    },\n    showComments(photo) {\n      const username = this.$route.params.username;\n        // Use Vue Router to navigate to the comments route\n        this.$router.push({\n          name: 'CommentPhotoForm', // Replace with the actual name of your Comments route\n          params: { PhotoId: photo.PhotoId , username: username },\n        });\n      },\n      getImageUrl(photobytes) {\n      if (photobytes) {\n        return `data:image/jpeg;base64,${photobytes}`;\n      }\n  \n        // If photobytes is null or undefined, return a placeholder or empty string\n        return '';\n      },\n    },\n  };\n  </script>\n  \n\n  \n  <style>\n  .photosector img{ \n    margin: 10px;\n  padding: 10px;\n  border: 1px solid #ccc;\n\n  }\n\n  .logo {\n  width: 150px;\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n}\n\n</style>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}