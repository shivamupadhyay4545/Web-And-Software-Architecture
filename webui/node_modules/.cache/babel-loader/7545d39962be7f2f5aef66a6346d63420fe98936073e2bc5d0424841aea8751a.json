{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport moment from 'moment';\nexport default {\n  data() {\n    return {\n      numberOfPhotos: 0,\n      followersCount: 0,\n      followingsCount: 0,\n      photos: [],\n      commentInput: ''\n    };\n  },\n  methods: {\n    async fetchUserProfile() {\n      try {\n        const username = this.$route.params.username;\n        const response = await axios.get(`http://localhost:8080/user/${username}/profile`);\n        const data = response.data;\n        console.log(data);\n        this.numberOfPhotos = data['my profile']['PhotoNo'];\n        this.followersCount = data['my profile']['Followers'];\n        this.followingsCount = data['my profile']['Following'];\n        this.photos = data['my profile']['Photos'];\n      } catch (error) {\n        console.error('Error fetching user profile:', error);\n      }\n    },\n    getImageUrl(photobytes) {\n      if (photobytes) {\n        return `data:image/jpeg;base64,${photobytes}`;\n      }\n\n      // If photobytes is null or undefined, return a placeholder or empty string\n      return '';\n    },\n    formatTimestamp(timestamp) {\n      // Use moment to format the timestamp\n      return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n    },\n    async postComment(PhotoId) {\n      try {\n        const username = this.$route.params.username;\n        const response = await axios.post(`http://localhost:8080/user/${username}/photos/comment?Photoid=${PhotoId}`, {\n          content: this.commentInput\n        });\n        if (response.status === 200) {\n          // Successfully posted comment, fetch updated user data\n          this.fetchUserProfile(); // Corrected method name\n          // Clear the comment input\n          this.commentInput = '';\n        } else {\n          console.error('Failed to post comment:', response.statusText);\n        }\n      } catch (error) {\n        const username = this.$route.params.username;\n        console.error('Error while posting comment:', error.message, 'username:', username, 'Photoid:', PhotoId);\n      }\n    },\n    showComments(photo) {\n      // Use Vue Router to navigate to the comments route\n      this.$router.push({\n        name: 'CommentPhotoForm',\n        // Replace with the actual name of your Comments route\n        params: {\n          PhotoId: photo.PhotoId,\n          username: this.$route.params.username\n        }\n      });\n    },\n    async toggleLike(photoId, liked) {\n      try {\n        const username = this.$route.params.username;\n        if (liked) {\n          // Send DELETE request to unlike the photo\n          await axios.delete(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        } else {\n          // Send POST request to like the photo\n          await axios.post(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        }\n        window.location.reload();\n        // Update dislikeStatus after toggling the like state\n      } catch (error) {\n        console.error('Error while toggling like:', error.message);\n      }\n    }\n  },\n  created() {\n    this.fetchUserProfile();\n  }\n};","map":{"version":3,"names":["axios","moment","data","numberOfPhotos","followersCount","followingsCount","photos","commentInput","methods","fetchUserProfile","username","$route","params","response","get","console","log","error","getImageUrl","photobytes","formatTimestamp","timestamp","format","postComment","PhotoId","post","content","status","statusText","message","showComments","photo","$router","push","name","toggleLike","photoId","liked","delete","window","location","reload","created"],"sources":["/Users/shivamkumar/Downloads/wasagit/Web-And-Software-Architecture/webui/src/components/UserProfile.vue"],"sourcesContent":["<template>\n    <div>\n      <router-link\n        :to=\"{ name: 'HomeView', params: { username: $route.params.username } }\"\n      >\n        Go to Home\n      </router-link>\n      <div class=\"profile-container\">\n        <div class=\"user-details\">\n          <p class=\"detail\">Photos: {{ numberOfPhotos }}</p>\n          <p class=\"detail\">Followers: {{ followersCount }}</p>\n          <p class=\"detail\">Followings: {{ followingsCount }}</p>\n        </div>\n  \n        <div v-if=\"photos.length > 0\" class=\"photo-list\">\n          <h3 class=\"photo-heading\">Photos</h3>\n          <ul>\n            <div v-for=\"photo in photos\" :key=\"photo.photoId\" class=\"photo-item\">\n              <button @click=\"showComments(photo)\">\n                <img :src=\"getImageUrl(photo.Photobytes)\" alt=\"User Photo\" />\n              </button>\n              <div class=\"photo-details\">\n                <p class=\"comment-count\">Comments: {{ photo.NoComments }}</p>\n                <input\n                  v-model=\"commentInput\"\n                  class=\"comment-input\"\n                  placeholder=\"Add a comment...\"\n                />\n                <button\n                  @click=\"postComment(photo.PhotoId)\"\n                  class=\"post-comment-button\"\n                >\n                  Post Comment\n                </button>\n                <p class=\"like-count\">Likes: {{ photo.Likes }}</p>\n                <button style=\"background-color: red;\"\n                  v-if=\"photo.Liked === 1\"\n                  @click=\"toggleLike(photo.PhotoId, true)\"\n                  class=\"dislike-button\"\n                >\n                  Dislike\n                </button>\n                <button\n                  v-else\n                  @click=\"toggleLike(photo.PhotoId, false)\"\n                  class=\"like-button\"\n                >\n                  Like\n                </button>\n                <p class=\"upload-time\">\n                  Uploaded At {{ formatTimestamp(photo.CreatedAt) }}\n                </p>\n              </div>\n            </div>\n          </ul>\n        </div>\n        <div v-else>\n          <p>No photos available</p>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import moment from 'moment';\n  \n  export default {\n    data() {\n      return {\n        numberOfPhotos: 0,\n        followersCount: 0,\n        followingsCount: 0,\n        photos: [],\n        commentInput: '',\n      };\n    },\n    methods: {\n      async fetchUserProfile() {\n        try {\n          const username = this.$route.params.username;\n          const response = await axios.get(`http://localhost:8080/user/${username}/profile`);\n          const data = response.data;\n          console.log(data)\n          this.numberOfPhotos = data['my profile']['PhotoNo'];\n          this.followersCount = data['my profile']['Followers'];\n          this.followingsCount = data['my profile']['Following'];\n          this.photos = data['my profile']['Photos'];\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      },\n      getImageUrl(photobytes) {\n        if (photobytes) {\n          return `data:image/jpeg;base64,${photobytes}`;\n        }\n  \n        // If photobytes is null or undefined, return a placeholder or empty string\n        return '';\n      },\n      formatTimestamp(timestamp) {\n        // Use moment to format the timestamp\n        return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n      },\n      async postComment(PhotoId) {\n        try {\n          const username = this.$route.params.username;\n          const response = await axios.post(\n            `http://localhost:8080/user/${username}/photos/comment?Photoid=${PhotoId}`,\n            {\n              content: this.commentInput,\n            }\n          );\n  \n          if (response.status === 200) {\n            // Successfully posted comment, fetch updated user data\n            this.fetchUserProfile(); // Corrected method name\n            // Clear the comment input\n            this.commentInput = '';\n          } else {\n            console.error('Failed to post comment:', response.statusText);\n          }\n        } catch (error) {\n          const username = this.$route.params.username;\n          console.error('Error while posting comment:', error.message, 'username:', username, 'Photoid:', PhotoId);\n        }\n      },\n      showComments(photo) {\n        // Use Vue Router to navigate to the comments route\n        this.$router.push({\n          name: 'CommentPhotoForm', // Replace with the actual name of your Comments route\n          params: { PhotoId: photo.PhotoId, username: this.$route.params.username },\n        });\n      },\n      async toggleLike(photoId, liked) {\n        try {\n          const username = this.$route.params.username;\n  \n          if (liked) {\n            // Send DELETE request to unlike the photo\n            await axios.delete(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n          } else {\n            // Send POST request to like the photo\n            await axios.post(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n          }\n          window.location.reload();\n          // Update dislikeStatus after toggling the like state\n        } catch (error) {\n          console.error('Error while toggling like:', error.message);\n        }\n      },\n    },\n    created() {\n      this.fetchUserProfile();\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .profile-container {\n    max-width: 800px;\n    margin: 0 auto;\n  }\n  \n  .user-details {\n  margin-bottom: 20px;\n  padding: 20px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n  \n  .detail {\n    font-size: 16px;\n    margin: 5px 0;\n  }\n  \n  .photo-list {\n    padding: 20px;\n    background-color: #fff;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n  }\n  \n  .photo-heading {\n    font-size: 18px;\n    margin-bottom: 10px;\n  }\n  \n  .photo-item {\n    margin-bottom: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n  \n  .photo-details {\n    width: 100%;\n    margin-top: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n  \n  .comment-count,\n  .like-count,\n  .upload-time {\n    font-size: 14px;\n    margin: 5px 0;\n  }\n  \n  .comment-input {\n    width: 100%;\n    margin: 10px 0;\n    padding: 5px;\n  }\n  \n  .post-comment-button,\n  .like-button,\n  .dislike-button {\n    background-color: #3498db;\n    color: #fff;\n    padding: 5px 10px;\n    border: none;\n    border-radius: 3px;\n    cursor: pointer;\n    margin: 5px 0;\n  }\n  \n  .post-comment-button:hover,\n  .like-button:hover,\n  .dislike-button:hover {\n    background-color: #2980b9;\n  }\n  \n  .upload-time {\n    margin-top: 10px;\n  }\n  </style>\n  \n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}