{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport UserHeader from '../components/UserHeader.vue';\nimport moment from 'moment';\nimport UploadPhotoForm from '../components/UploadPhotoForm.vue';\nexport default {\n  components: {\n    UserHeader,\n    UploadPhotoForm\n  },\n  name: 'HomeView',\n  data() {\n    return {\n      userData: null,\n      commentInput: '',\n      dislikeStatus: -1\n    };\n  },\n  props: {\n    photo: Object\n  },\n  mounted() {\n    // Fetch user data after component is mounted\n    this.fetchUserData();\n  },\n  methods: {\n    async checkDislikeStatus() {\n      try {\n        const username = this.$route.params.username;\n        //const photoid = this.photo.photoId;\n\n        // Make an API call to the Golang backend\n        const response = await axios.get(`/user/${username}/photos/?photoid=${photoid}`);\n\n        // Assuming the backend response has a \"count\" property\n        this.dislikeStatus = response.data.count;\n      } catch (error) {\n        console.error('Error checking dislike status:', error.message);\n        // Handle error if needed\n      }\n    },\n    handleDislike() {\n      // Logic to handle dislike button click\n      console.log('Dislike button clicked');\n      // You can perform additional actions if needed\n    },\n    handleLike() {\n      // Logic to handle like button click\n      console.log('Like button clicked');\n      // You can perform additional actions if needed\n    }\n  },\n  created() {\n    // Call the method to check the dislike status when the component is created\n    this.checkDislikeStatus();\n  },\n  async postComment(PhotoId) {\n    try {\n      const username = this.$route.params.username;\n      const response = await axios.post(`http://localhost:8080/user/${username}/photos/comment?Photoid=${PhotoId}`, {\n        content: this.commentInput\n      });\n      if (response.status === 200) {\n        // Successfully posted comment, fetch updated user data\n        this.fetchUserData();\n        // Clear the comment input\n        this.commentInput = '';\n      } else {\n        console.error('Failed to post comment:', response.statusText);\n      }\n    } catch (error) {\n      const username = this.$route.params.username;\n      console.error('Error while posting comment:', error.message, \"username:\", username, \"Photoid:\", PhotoId);\n    }\n  },\n  async toggleLike(photoId, liked) {\n    try {\n      const username = this.$route.params.username;\n      if (liked) {\n        // Send DELETE request to unlike the photo\n        await axios.delete(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n      } else {\n        // Send POST request to like the photo\n        await axios.post(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n      }\n\n      // Fetch updated user data after toggling the like state\n      this.fetchUserData();\n    } catch (error) {\n      console.error('Error while toggling like:', error.message);\n    }\n  },\n  async fetchUserData() {\n    try {\n      const username = this.$route.params.username;\n      const response = await axios.get(`http://localhost:8080/user/${username}`);\n      if (response.status === 200) {\n        this.userData = response.data;\n      } else {\n        console.error('Failed to fetch user data:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error during user data fetch:', error.message);\n    }\n  },\n  formatTimestamp(timestamp) {\n    // Use moment to format the timestamp\n    return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n  },\n  showComments(photo) {\n    const username = this.$route.params.username;\n    // Use Vue Router to navigate to the comments route\n    this.$router.push({\n      name: 'CommentPhotoForm',\n      // Replace with the actual name of your Comments route\n      params: {\n        PhotoId: photo.PhotoId,\n        username: username\n      }\n    });\n  },\n  getImageUrl(photobytes) {\n    if (photobytes) {\n      return `data:image/jpeg;base64,${photobytes}`;\n    }\n\n    // If photobytes is null or undefined, return a placeholder or empty string\n    return '';\n  }\n};","map":{"version":3,"names":["axios","UserHeader","moment","UploadPhotoForm","components","name","data","userData","commentInput","dislikeStatus","props","photo","Object","mounted","fetchUserData","methods","checkDislikeStatus","username","$route","params","response","get","photoid","count","error","console","message","handleDislike","log","handleLike","created","postComment","PhotoId","post","content","status","statusText","toggleLike","photoId","liked","delete","formatTimestamp","timestamp","format","showComments","$router","push","getImageUrl","photobytes"],"sources":["/Users/shivamkumar/Desktop/wasaphoto/webui/src/views/HomeView.vue"],"sourcesContent":["<!-- Home.vue -->\n\n<template>\n        <UserHeader />\n        <UploadPhotoForm />\n      <h1>Hello User, Welcome to your feed</h1>\n      <router-link :to=\"{ name: 'UserProfile', params: { username: $route.params.username } }\">\n      Go to User Profile\n      </router-link>\n      <div v-if=\"userData && userData.photos\">\n        <!-- Display user data when 'photos' is not null -->\n        <div class=\"photosector\" v-for=\"photo in userData.photos\" :key=\"photo.PhotoId\">\n          <p style=\"font-weight: bold;\" > {{ photo.Username }}</p>\n          <button style=\"border: false\" @click=\"showComments(photo)\">\n          <img :src=\"getImageUrl(photo.Photobytes)\" alt=\"User Photo\" />\n        </button>\n        <button v-if=\"dislikeStatus === 1\" @click=\"handleDislike\">Dislike</button>\n        <button v-else @click=\"handleLike\">Like</button>\n            \n          <img class=\"logo\" src=\"../assets/comment-logo.png\" /><p> Comments: {{ photo.NoComments }}</p>\n          <input v-model=\"commentInput\" placeholder=\"Add a comment...\" />\n          <button @click=\"postComment(photo.PhotoId)\">Post Comment</button>\n          <p>Uploaded At {{ formatTimestamp(photo.CreatedAt) }}</p>\n        </div>\n      </div>\n      <div v-else>\n        <p>Welcome Our new user! Follow someone to see their photos.</p>\n      </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import UserHeader from '../components/UserHeader.vue';\n  import moment from 'moment';\n  import UploadPhotoForm from '../components/UploadPhotoForm.vue'\n\n  \n  export default {\n    components: {\n    UserHeader,\n    UploadPhotoForm\n    },\n    name: 'HomeView',\n    data() {\n      return {\n        userData: null,\n        commentInput :'',\n        dislikeStatus:-1,\n      };\n    },\n    props: {\n      photo: Object,\n    },\n    mounted() {\n      // Fetch user data after component is mounted\n      this.fetchUserData();\n    },\n    methods: {\n      async checkDislikeStatus() {\n      try {\n        const username = this.$route.params.username;\n        //const photoid = this.photo.photoId;\n\n        // Make an API call to the Golang backend\n        const response = await axios.get(`/user/${username}/photos/?photoid=${photoid}`);\n\n        // Assuming the backend response has a \"count\" property\n        this.dislikeStatus = response.data.count;\n      } catch (error) {\n        console.error('Error checking dislike status:', error.message);\n        // Handle error if needed\n      }\n    },\n    handleDislike() {\n      // Logic to handle dislike button click\n      console.log('Dislike button clicked');\n      // You can perform additional actions if needed\n    },\n    handleLike() {\n      // Logic to handle like button click\n      console.log('Like button clicked');\n      // You can perform additional actions if needed\n    },\n  },\n  created() {\n    // Call the method to check the dislike status when the component is created\n    this.checkDislikeStatus();\n  },\n        async postComment(PhotoId) {\n      try {\n        const username = this.$route.params.username;\n        const response = await axios.post(`http://localhost:8080/user/${username}/photos/comment?Photoid=${PhotoId}`, {\n          content: this.commentInput,\n        });\n\n        if (response.status === 200) {\n          // Successfully posted comment, fetch updated user data\n          this.fetchUserData();\n          // Clear the comment input\n          this.commentInput = '';\n        } else {\n          console.error('Failed to post comment:', response.statusText);\n        }\n      } catch (error) {\n        const username = this.$route.params.username;\n        console.error('Error while posting comment:', error.message,\"username:\",username,\"Photoid:\",PhotoId);\n      }\n    },\n  \n        async toggleLike(photoId, liked) {\n      try {\n        const username = this.$route.params.username;\n\n        if (liked) {\n          // Send DELETE request to unlike the photo\n          await axios.delete(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        } else {\n          // Send POST request to like the photo\n          await axios.post(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        }\n\n        // Fetch updated user data after toggling the like state\n        this.fetchUserData();\n      } catch (error) {\n        console.error('Error while toggling like:', error.message);\n      }\n    },\n      async fetchUserData() {\n        try {\n          const username = this.$route.params.username;\n          const response = await axios.get(`http://localhost:8080/user/${username}`);\n  \n          if (response.status === 200) {\n            this.userData = response.data;\n          } else {\n            console.error('Failed to fetch user data:', response.statusText);\n          }\n        } catch (error) {\n          console.error('Error during user data fetch:', error.message);\n        }\n      },\n      formatTimestamp(timestamp) {\n      // Use moment to format the timestamp\n      return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n    },\n    showComments(photo) {\n      const username = this.$route.params.username;\n        // Use Vue Router to navigate to the comments route\n        this.$router.push({\n          name: 'CommentPhotoForm', // Replace with the actual name of your Comments route\n          params: { PhotoId: photo.PhotoId , username: username },\n        });\n      },\n      getImageUrl(photobytes) {\n      if (photobytes) {\n        return `data:image/jpeg;base64,${photobytes}`;\n      }\n  \n        // If photobytes is null or undefined, return a placeholder or empty string\n        return '';\n      },\n    };\n  </script>\n  \n\n  \n  <style>\n  .photosector img{ \n    margin: 10px;\n  padding: 10px;\n  \n\n  }\n\n  .logo {\n  width: 150px;\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n}\n\n</style>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}