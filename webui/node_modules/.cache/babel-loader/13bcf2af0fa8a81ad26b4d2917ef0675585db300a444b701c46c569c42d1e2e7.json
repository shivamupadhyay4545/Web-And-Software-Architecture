{"ast":null,"code":"import axios from 'axios';\nimport moment from 'moment';\nexport default {\n  data() {\n    return {\n      comments: [],\n      photoBytes: ''\n    };\n  },\n  props: {\n    username: String,\n    PhotoId: String\n  },\n  methods: {\n    async fetchComments() {\n      const username = this.$route.params.username;\n      const PhotoId = this.$route.params.PhotoId;\n      try {\n        const username = this.$route.params.username;\n        const PhotoId = this.$route.params.PhotoId;\n        // Make a GET request to fetch comments data\n        console.error('Error of index:', PhotoId, username);\n        const response = await axios.get(`http://localhost:8080/user/${username}/photos/${PhotoId}`);\n\n        // Update data with the fetched comments and photoBytes\n        this.comments = response.data.comments;\n        this.photoBytes = response.data.photobytes;\n      } catch (error) {\n        console.log(\"bhenchod\", username, this.PhotoId);\n        console.error('Error fetching comments:', PhotoId, username);\n      }\n    },\n    getImageUrl(photobytes) {\n      if (photobytes) {\n        return `data:image/jpeg;base64,${photobytes}`;\n      }\n      return ''; // Return placeholder or empty string if photobytes is null or undefined\n    },\n    formatTimestamp(timestamp) {\n      // Use moment to format the timestamp\n      return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n    }\n  },\n  mounted() {\n    // Fetch comments data when the component is mounted\n    this.fetchComments();\n  }\n};","map":{"version":3,"names":["axios","moment","data","comments","photoBytes","props","username","String","PhotoId","methods","fetchComments","$route","params","console","error","response","get","photobytes","log","getImageUrl","formatTimestamp","timestamp","format","mounted"],"sources":["/Users/shivamkumar/Desktop/wasaphoto/webui/src/components/CommentPhotoForm.vue"],"sourcesContent":["<template>\n    <div>\n      <img :src=\"getImageUrl(photoBytes)\" alt=\"User Photo\" />\n      <div v-for=\"comment in comments\" :key=\"comment.DateTime\">\n        <p>{{ comment.CommentUser }}:</p>\n        <p>{{ comment.Comment }}</p>\n        <p>{{ formatTimestamp(comment.DateTime) }}</p>\n        <hr />\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import moment from 'moment';\n  \n  export default {\n    data() {\n      return {\n        comments: [],\n        photoBytes: '',\n      };\n    },\n    props: {\n      username: String,\n      PhotoId: String,\n    },\n    methods: {\n      async fetchComments() {\n        const username = this.$route.params.username;\n            const PhotoId = this.$route.params.PhotoId;\n        try {\n            const username = this.$route.params.username;\n            const PhotoId = this.$route.params.PhotoId\n          // Make a GET request to fetch comments data\n          console.error('Error of index:', PhotoId,username)\n          const response = await axios.get(`http://localhost:8080/user/${username}/photos/${PhotoId}`);\n  \n          // Update data with the fetched comments and photoBytes\n          this.comments = response.data.comments;\n          this.photoBytes = response.data.photobytes;\n        } catch (error) {\n            console.log(\"bhenchod\",username,this.PhotoId)\n          console.error('Error fetching comments:', PhotoId,username);\n        }\n      },\n      getImageUrl(photobytes) {\n        if (photobytes) {\n          return `data:image/jpeg;base64,${photobytes}`;\n        }\n        return ''; // Return placeholder or empty string if photobytes is null or undefined\n      },\n      formatTimestamp(timestamp) {\n        // Use moment to format the timestamp\n        return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n      },\n    },\n    mounted() {\n      // Fetch comments data when the component is mounted\n      this.fetchComments();\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Add your component styles here */\n  </style>\n  "],"mappings":"AAaE,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,MAAK,MAAO,QAAQ;AAE3B,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACLC,QAAQ,EAAEC,MAAM;IAChBC,OAAO,EAAED;EACX,CAAC;EACDE,OAAO,EAAE;IACP,MAAMC,aAAaA,CAAA,EAAG;MACpB,MAAMJ,QAAO,GAAI,IAAI,CAACK,MAAM,CAACC,MAAM,CAACN,QAAQ;MACxC,MAAME,OAAM,GAAI,IAAI,CAACG,MAAM,CAACC,MAAM,CAACJ,OAAO;MAC9C,IAAI;QACA,MAAMF,QAAO,GAAI,IAAI,CAACK,MAAM,CAACC,MAAM,CAACN,QAAQ;QAC5C,MAAME,OAAM,GAAI,IAAI,CAACG,MAAM,CAACC,MAAM,CAACJ,OAAM;QAC3C;QACAK,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAEN,OAAO,EAACF,QAAQ;QACjD,MAAMS,QAAO,GAAI,MAAMf,KAAK,CAACgB,GAAG,CAAE,8BAA6BV,QAAS,WAAUE,OAAQ,EAAC,CAAC;;QAE5F;QACA,IAAI,CAACL,QAAO,GAAIY,QAAQ,CAACb,IAAI,CAACC,QAAQ;QACtC,IAAI,CAACC,UAAS,GAAIW,QAAQ,CAACb,IAAI,CAACe,UAAU;MAC5C,EAAE,OAAOH,KAAK,EAAE;QACZD,OAAO,CAACK,GAAG,CAAC,UAAU,EAACZ,QAAQ,EAAC,IAAI,CAACE,OAAO;QAC9CK,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEN,OAAO,EAACF,QAAQ,CAAC;MAC7D;IACF,CAAC;IACDa,WAAWA,CAACF,UAAU,EAAE;MACtB,IAAIA,UAAU,EAAE;QACd,OAAQ,0BAAyBA,UAAW,EAAC;MAC/C;MACA,OAAO,EAAE,EAAE;IACb,CAAC;IACDG,eAAeA,CAACC,SAAS,EAAE;MACzB;MACA,OAAOpB,MAAM,CAACoB,SAAS,CAAC,CAACC,MAAM,CAAC,qBAAqB,CAAC;IACxD;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACb,aAAa,CAAC,CAAC;EACtB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}