{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport moment from 'moment';\nexport default {\n  data() {\n    return {\n      numberOfPhotos: 0,\n      followersCount: 0,\n      followingsCount: 0,\n      photos: []\n    };\n  },\n  props: {\n    photo: Object\n  },\n  methods: {\n    async fetchUserProfile() {\n      try {\n        const username = this.$route.params.username;\n        const response = await axios.get(`http://localhost:8080/user/${username}/profile`);\n        const data = response.data;\n        this.numberOfPhotos = data['my profile']['PhotoNo'];\n        this.followersCount = data['my profile']['Followers'];\n        this.followingsCount = data['my profile']['Following'];\n        this.photos = data['my profile']['Photos'];\n      } catch (error) {\n        console.error('Error fetching user profile:', error);\n      }\n    },\n    getImageUrl(photobytes) {\n      if (photobytes) {\n        return `data:image/jpeg;base64,${photobytes}`;\n      }\n\n      // If photobytes is null or undefined, return a placeholder or empty string\n      return '';\n    },\n    formatTimestamp(timestamp) {\n      // Use moment to format the timestamp\n      return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n    },\n    async postComment(PhotoId) {\n      try {\n        const username = this.$route.params.username;\n        const response = await axios.post(`http://localhost:8080/user/${username}/photos/comment?Photoid=${PhotoId}`, {\n          content: this.commentInput\n        });\n        if (response.status === 200) {\n          // Successfully posted comment, fetch updated user data\n          this.fetchUserData();\n          // Clear the comment input\n          this.commentInput = '';\n        } else {\n          console.error('Failed to post comment:', response.statusText);\n        }\n      } catch (error) {\n        const username = this.$route.params.username;\n        console.error('Error while posting comment:', error.message, 'username:', username, 'Photoid:', PhotoId);\n      }\n    },\n    showComments(photo) {\n      // Use Vue Router to navigate to the comments route\n      this.$router.push({\n        name: 'CommentPhotoForm',\n        // Replace with the actual name of your Comments route\n        params: {\n          PhotoId: photo.PhotoId,\n          username: this.$route.params.username\n        }\n      });\n    }\n  },\n  async toggleLike(photoId, liked) {\n    try {\n      const username = this.$route.params.username;\n      if (liked) {\n        // Send DELETE request to unlike the photo\n        await axios.delete(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n      } else {\n        // Send POST request to like the photo\n        await axios.post(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n      }\n      window.location.reload();\n      // Update dislikeStatus after toggling the like state\n    } catch (error) {\n      console.error('Error while toggling like:', error.message);\n    }\n  },\n  created() {\n    this.fetchUserProfile();\n  }\n};","map":{"version":3,"names":["axios","moment","data","numberOfPhotos","followersCount","followingsCount","photos","props","photo","Object","methods","fetchUserProfile","username","$route","params","response","get","error","console","getImageUrl","photobytes","formatTimestamp","timestamp","format","postComment","PhotoId","post","content","commentInput","status","fetchUserData","statusText","message","showComments","$router","push","name","toggleLike","photoId","liked","delete","window","location","reload","created"],"sources":["/Users/shivamkumar/Desktop/wasaphoto/webui/src/components/UserProfile.vue"],"sourcesContent":["<!-- components/Profile.vue -->\n<template>\n    <router-link :to=\"{ name: 'HomeView', params: { username: $route.params.username } }\">\n      Go to Home\n      </router-link>\n    <div>\n      <!-- Display user details: number of photos, followers, and followings -->\n      <div>\n        <p>Photos: {{ numberOfPhotos }}</p>\n        <p>Followers: {{ followersCount }}</p>\n        <p>Followings: {{ followingsCount }}</p>\n      </div>\n  \n      <!-- Display a list of user photos -->\n      <div v-if=\"photos.length > 0\">\n        <h3>Photos</h3>\n        <ul>\n          <div v-for=\"photo in photos\" :key=\"photo.photoId\">\n            <!-- Display each photo as a clickable button -->\n            <button @click=\"showComments(photo)\">\n              <img :src=\"getImageUrl(photo.Photobytes)\" alt=\"User Photo\" />\n            </button>\n              <p>Comments {{ photo.NoComments }}</p>\n              <input v-model=\"commentInput\" class=\"comment-input\" placeholder=\"Add a comment...\" />\n              <button @click=\"postComment(photo.PhotoId)\" class=\"post-comment-button\">Post Comment</button>\n              <p>Likes {{ photo.Likes }}</p>\n              <button v-if=\"photo.Liked === 1\" @click=\"toggleLike(photo.PhotoId, true)\">Dislike</button>\n              <button v-else @click=\"toggleLike(photo.PhotoId, false)\">Like</button>\n              <p>Uploaded At {{ formatTimestamp(photo.CreatedAt) }}</p>\n          </div>\n        </ul>\n      </div>\n      <div v-else>\n        <p>No photos available</p>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import moment from 'moment';\n  \n  export default {\n    data() {\n      return {\n        numberOfPhotos: 0,\n        followersCount: 0,\n        followingsCount: 0,\n        photos: [],\n      };\n    },\n    props: {\n      photo: Object,\n    },\n    methods: {\n      async fetchUserProfile() {\n        try {\n          const username = this.$route.params.username;\n          const response = await axios.get(`http://localhost:8080/user/${username}/profile`);\n          const data = response.data;\n  \n          this.numberOfPhotos = data['my profile']['PhotoNo'];\n          this.followersCount = data['my profile']['Followers'];\n          this.followingsCount = data['my profile']['Following'];\n          this.photos = data['my profile']['Photos'];\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      },\n      getImageUrl(photobytes) {\n        if (photobytes) {\n          return `data:image/jpeg;base64,${photobytes}`;\n        }\n  \n        // If photobytes is null or undefined, return a placeholder or empty string\n        return '';\n      },\n      formatTimestamp(timestamp) {\n        // Use moment to format the timestamp\n        return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n      },\n      async postComment(PhotoId) {\n      try {\n        const username = this.$route.params.username;\n        const response = await axios.post(\n          `http://localhost:8080/user/${username}/photos/comment?Photoid=${PhotoId}`,\n          {\n            content: this.commentInput,\n          }\n        );\n\n        if (response.status === 200) {\n          // Successfully posted comment, fetch updated user data\n          this.fetchUserData();\n          // Clear the comment input\n          this.commentInput = '';\n        } else {\n          console.error('Failed to post comment:', response.statusText);\n        }\n      } catch (error) {\n        const username = this.$route.params.username;\n        console.error('Error while posting comment:', error.message, 'username:', username, 'Photoid:', PhotoId);\n      }\n    },\n      showComments(photo) {\n        // Use Vue Router to navigate to the comments route\n        this.$router.push({\n          name: 'CommentPhotoForm', // Replace with the actual name of your Comments route\n          params: { PhotoId: photo.PhotoId , username: this.$route.params.username},\n        });\n      },\n    },\n    async toggleLike(photoId, liked) {\n      try {\n        const username = this.$route.params.username;\n\n        if (liked) {\n          // Send DELETE request to unlike the photo\n          await axios.delete(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        } else {\n          // Send POST request to like the photo\n          await axios.post(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        }\n        window.location.reload()\n        // Update dislikeStatus after toggling the like state\n        \n      } catch (error) {\n        console.error('Error while toggling like:', error.message);\n      }\n    },\n    created() {\n      this.fetchUserProfile();\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Add your component styles here */\n  </style>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}