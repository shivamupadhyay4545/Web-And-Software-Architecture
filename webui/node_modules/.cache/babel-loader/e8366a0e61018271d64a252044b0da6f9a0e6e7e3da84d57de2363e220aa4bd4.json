{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport UserHeader from '../components/UserHeader.vue';\nimport moment from 'moment';\nimport UploadPhotoForm from '../components/UploadPhotoForm.vue';\nexport default {\n  components: {\n    UserHeader,\n    UploadPhotoForm\n  },\n  name: 'HomeView',\n  data() {\n    return {\n      userData: null,\n      commentInput: ''\n    };\n  },\n  mounted() {\n    // Fetch user data after component is mounted\n    this.fetchUserData();\n  },\n  methods: {\n    async toggleLike(photoId, liked) {\n      try {\n        const username = this.$route.params.username;\n        if (liked) {\n          // Send DELETE request to unlike the photo\n          await axios.delete(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        } else {\n          // Send POST request to like the photo\n          await axios.post(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        }\n\n        // Update dislikeStatus after toggling the like state\n      } catch (error) {\n        console.error('Error while toggling like:', error.message);\n      }\n    },\n    async postComment(PhotoId) {\n      try {\n        const username = this.$route.params.username;\n        const response = await axios.post(`http://localhost:8080/user/${username}/photos/comment?Photoid=${PhotoId}`, {\n          content: this.commentInput\n        });\n        if (response.status === 200) {\n          // Successfully posted comment, fetch updated user data\n          this.fetchUserData();\n          // Clear the comment input\n          this.commentInput = '';\n        } else {\n          console.error('Failed to post comment:', response.statusText);\n        }\n      } catch (error) {\n        const username = this.$route.params.username;\n        console.error('Error while posting comment:', error.message, 'username:', username, 'Photoid:', PhotoId);\n      }\n    },\n    async fetchUserData() {\n      try {\n        const username = this.$route.params.username;\n        const response = await axios.get(`http://localhost:8080/user/${username}`);\n        if (response.status === 200) {\n          this.userData = response.data;\n          // Initialize dislikeStatus for each photo\n          this.userData.photos.forEach(async photo => {\n            photo.dislikeStatus = await this.checkDislikeStatus(photo.PhotoId);\n          });\n        } else {\n          console.error('Failed to fetch user data:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error during user data fetch:', error.message);\n      }\n    },\n    formatTimestamp(timestamp) {\n      // Use moment to format the timestamp\n      return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n    },\n    showComments(photo) {\n      const username = this.$route.params.username;\n      // Use Vue Router to navigate to the comments route\n      this.$router.push({\n        name: 'CommentPhotoForm',\n        // Replace with the actual name of your Comments route\n        params: {\n          PhotoId: photo.PhotoId,\n          username: username\n        }\n      });\n    },\n    getImageUrl(photobytes) {\n      if (photobytes) {\n        return `data:image/jpeg;base64,${photobytes}`;\n      }\n\n      // If photobytes is null or undefined, return a placeholder or empty string\n      return '';\n    }\n  }\n};","map":{"version":3,"names":["axios","UserHeader","moment","UploadPhotoForm","components","name","data","userData","commentInput","mounted","fetchUserData","methods","toggleLike","photoId","liked","username","$route","params","delete","post","error","console","message","postComment","PhotoId","response","content","status","statusText","get","photos","forEach","photo","dislikeStatus","checkDislikeStatus","formatTimestamp","timestamp","format","showComments","$router","push","getImageUrl","photobytes"],"sources":["/Users/shivamkumar/Desktop/wasaphoto/webui/src/views/HomeView.vue"],"sourcesContent":["<template>\n  <div>\n    <UserHeader />\n    <UploadPhotoForm />\n    <h1>Hello User, Welcome to your feed</h1>\n    <router-link :to=\"{ name: 'UserProfile', params: { username: $route.params.username } }\">\n      Go to User Profile\n    </router-link>\n    <div v-if=\"userData && userData.photos\">\n      <!-- Display user data when 'photos' is not null -->\n      <div class=\"photosector\" v-for=\"photo in userData.photos\" :key=\"photo.PhotoId\">\n        <p style=\"font-weight: bold;\"> {{ photo.Username }}</p>\n        <button style=\"border: false\" @click=\"showComments(photo)\">\n          <img :src=\"getImageUrl(photo.Photobytes)\" alt=\"User Photo\" />\n        </button>\n        <button v-if=\"photo.Liked === 1\" @click=\"toggleLike(photo.PhotoId, true)\">Dislike</button>\n        <button v-else @click=\"toggleLike(photo.PhotoId, false)\">Like</button>\n\n        <p> Likes: {{ photo.Likes }}</p>\n\n        <img class=\"logo\" src=\"../assets/comment-logo.png\" />\n        <p> Comments: {{ photo.NoComments }}</p>\n        <input v-model=\"commentInput\" placeholder=\"Add a comment...\" />\n        <button @click=\"postComment(photo.PhotoId)\">Post Comment</button>\n        <p>Uploaded At {{ formatTimestamp(photo.CreatedAt) }}</p>\n      </div>\n    </div>\n    <div v-else>\n      <p>Welcome Our new user! Follow someone to see their photos.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport UserHeader from '../components/UserHeader.vue';\nimport moment from 'moment';\nimport UploadPhotoForm from '../components/UploadPhotoForm.vue';\n\nexport default {\n  components: {\n    UserHeader,\n    UploadPhotoForm,\n  },\n  name: 'HomeView',\n  data() {\n    return {\n      userData: null,\n      commentInput: '',\n    };\n  },\n  mounted() {\n    // Fetch user data after component is mounted\n    this.fetchUserData();\n  },\n  methods: {\n    \n    async toggleLike(photoId, liked) {\n      try {\n        const username = this.$route.params.username;\n\n        if (liked) {\n          // Send DELETE request to unlike the photo\n          await axios.delete(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        } else {\n          // Send POST request to like the photo\n          await axios.post(`http://localhost:8080/user/${username}/photos/likes?Photoid=${photoId}`);\n        }\n\n        // Update dislikeStatus after toggling the like state\n        \n      } catch (error) {\n        console.error('Error while toggling like:', error.message);\n      }\n    },\n    async postComment(PhotoId) {\n      try {\n        const username = this.$route.params.username;\n        const response = await axios.post(\n          `http://localhost:8080/user/${username}/photos/comment?Photoid=${PhotoId}`,\n          {\n            content: this.commentInput,\n          }\n        );\n\n        if (response.status === 200) {\n          // Successfully posted comment, fetch updated user data\n          this.fetchUserData();\n          // Clear the comment input\n          this.commentInput = '';\n        } else {\n          console.error('Failed to post comment:', response.statusText);\n        }\n      } catch (error) {\n        const username = this.$route.params.username;\n        console.error('Error while posting comment:', error.message, 'username:', username, 'Photoid:', PhotoId);\n      }\n    },\n\n    async fetchUserData() {\n      try {\n        const username = this.$route.params.username;\n        const response = await axios.get(`http://localhost:8080/user/${username}`);\n\n        if (response.status === 200) {\n          this.userData = response.data;\n          // Initialize dislikeStatus for each photo\n          this.userData.photos.forEach(async (photo) => {\n            photo.dislikeStatus = await this.checkDislikeStatus(photo.PhotoId);\n          });\n        } else {\n          console.error('Failed to fetch user data:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error during user data fetch:', error.message);\n      }\n    },\n    formatTimestamp(timestamp) {\n      // Use moment to format the timestamp\n      return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n    },\n    showComments(photo) {\n      const username = this.$route.params.username;\n      // Use Vue Router to navigate to the comments route\n      this.$router.push({\n        name: 'CommentPhotoForm', // Replace with the actual name of your Comments route\n        params: { PhotoId: photo.PhotoId, username: username },\n      });\n    },\n    getImageUrl(photobytes) {\n      if (photobytes) {\n        return `data:image/jpeg;base64,${photobytes}`;\n      }\n\n      // If photobytes is null or undefined, return a placeholder or empty string\n      return '';\n    },\n  },\n};\n</script>\n\n<style>\n.photosector img {\n  margin: 10px;\n  padding: 10px;\n}\n\n.logo {\n  width: 150px;\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}