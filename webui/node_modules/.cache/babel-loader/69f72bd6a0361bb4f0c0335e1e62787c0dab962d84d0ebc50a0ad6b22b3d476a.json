{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-177f91b2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"src\"];\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"img\", {\n    src: $options.getImageUrl($data.photoBytes),\n    alt: \"User Photo\"\n  }, null, 8 /* PROPS */, _hoisted_1), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.comments, comment => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: comment.DateTime\n    }, [_createElementVNode(\"p\", null, _toDisplayString(comment.CommentUser) + \":\", 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(comment.Comment), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($options.formatTimestamp(comment.DateTime)), 1 /* TEXT */), this.username === comment.CommentUser ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      onClick: $event => $options.deleteComment(comment.Comment)\n    }, \" Delete Comment \", 8 /* PROPS */, _hoisted_2)) : _createCommentVNode(\"v-if\", true), _hoisted_3]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","src","$options","getImageUrl","$data","photoBytes","alt","_Fragment","_renderList","comments","comment","key","DateTime","_toDisplayString","CommentUser","Comment","formatTimestamp","username","onClick","$event","deleteComment","_hoisted_2","_hoisted_3"],"sources":["/Users/shivamkumar/Desktop/wasaphoto/webui/src/components/CommentPhotoForm.vue"],"sourcesContent":["<template>\n    <div>\n      <img :src=\"getImageUrl(photoBytes)\" alt=\"User Photo\" />\n      <div v-for=\"comment in comments\" :key=\"comment.DateTime\">\n        <p>{{ comment.CommentUser }}:</p>\n        <p>{{ comment.Comment }}</p>\n        <p>{{ formatTimestamp(comment.DateTime) }}</p>\n        <button v-if=\"this.username === comment.CommentUser\" @click=\"deleteComment(comment.Comment)\">\n        Delete Comment\n      </button>\n        <hr />\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import moment from 'moment';\n  \n  export default {\n    data() {\n      return {\n        comments: [],\n        photoBytes: '',\n      };\n    },\n    props: {\n      username: String,\n      PhotoId: String,\n    },\n    methods: {\n        async deleteComment(Content) {\n            const jsonPayload = { Content };\n      try {\n        const jsonPayload = { Content };\n\n        const queryParamValue = this.PhotoId; // Replace with your actual query parameter value\n        const url = `http://localhost:8080/user/${this.username}/photos/comment?Photoid=${queryParamValue}`;\n\n        const response = await axios.delete(url, { data: jsonPayload });\n\n\n        if (response.status === 200) {\n          console.log('Comment deleted successfully!');\n          // Fetch comments data after deleting the comment\n          this.fetchComments();\n        } else {\n          console.error('Failed to delete comment:', response.statusText);\n        }\n      } catch (error) {\n        console.log(jsonPayload)\n        console.error('Error deleting comment11:', error.message);\n      }\n    },\n\n\n      async fetchComments() {\n        const parts = this.PhotoId.split('_');\n        try {\n            const parts = this.PhotoId.split('_');\n          // Make a GET request to fetch comments data\n          const response = await axios.get(`http://localhost:8080/user/${parts[0]}/photos/${this.PhotoId}`);\n  \n          // Update data with the fetched comments and photoBytes\n          this.comments = response.data.comments;\n          this.photoBytes = response.data.photobytes;\n        } catch (error) {\n            console.log(\"bhenchod\",parts[0],this.PhotoId)\n          console.error('Error fetching comments:', this.PhotoId,this.username);\n        }\n      },\n      getImageUrl(photobytes) {\n        if (photobytes) {\n          return `data:image/jpeg;base64,${photobytes}`;\n        }\n        return ''; // Return placeholder or empty string if photobytes is null or undefined\n      },\n      formatTimestamp(timestamp) {\n        // Use moment to format the timestamp\n        return moment(timestamp).format('YYYY-MM-DD HH:mm:ss');\n      },\n    },\n    mounted() {\n      // Fetch comments data when the component is mounted\n      this.fetchComments();\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Add your component styles here */\n  </style>\n  "],"mappings":";;;;gEAUQA,mBAAA,CAAM;;uBATVC,mBAAA,CAWM,cAVJD,mBAAA,CAAuD;IAAjDE,GAAG,EAAEC,QAAA,CAAAC,WAAW,CAACC,KAAA,CAAAC,UAAU;IAAGC,GAAG,EAAC;0DACxCN,mBAAA,CAQMO,SAAA,QAAAC,WAAA,CARiBJ,KAAA,CAAAK,QAAQ,EAAnBC,OAAO;yBAAnBV,mBAAA,CAQM;MAR4BW,GAAG,EAAED,OAAO,CAACE;QAC7Cb,mBAAA,CAAiC,WAAAc,gBAAA,CAA3BH,OAAO,CAACI,WAAW,IAAG,GAAC,iBAC7Bf,mBAAA,CAA4B,WAAAc,gBAAA,CAAtBH,OAAO,CAACK,OAAO,kBACrBhB,mBAAA,CAA8C,WAAAc,gBAAA,CAAxCX,QAAA,CAAAc,eAAe,CAACN,OAAO,CAACE,QAAQ,mB,KACnBK,QAAQ,KAAKP,OAAO,CAACI,WAAW,I,cAAnDd,mBAAA,CAEO;;MAF+CkB,OAAK,EAAAC,MAAA,IAAEjB,QAAA,CAAAkB,aAAa,CAACV,OAAO,CAACK,OAAO;OAAG,kBAE/F,iBAAAM,UAAA,K,mCACEC,UAAM,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}